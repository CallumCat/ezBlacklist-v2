[null,{"name":"eval","permissions":"NONE","restriction":"0","_id":"sRxja","actions":[{"code":"const { RichEmbed } = require('discord.js')\nconst { inspect } = require('util')\n\nconst embed = new RichEmbed()\n  .setFooter(msg.author.tag, msg.author.displayAvatarURL)\n\nconst prefix = (server && server.tag) || this.getDBM().Files.data.settings.tag\nconst args = msg.content.slice(prefix.length).trim().split(/ +/g); args.shift()\nconst query = args.join(' ')\nconst code = (lang, code) => (`\\`\\`\\`${lang}\\n${String(code).slice(0, 1000) + (code.length >= 1000 ? '...' : '')}\\n\\`\\`\\``).replace(this.getDBM().Bot.bot.token, '*'.repeat(this.getDBM().Bot.bot.token.length))\n\nif (!query) msg.channel.send('Please, write something so I can evaluate!')\nelse {\n  try {\n    const evald = eval(query)\n    const res = typeof evald === 'string' ? evald : inspect(evald, { depth: 0 })\n\n    embed.addField('Result', code('js', res))\n\n    if (!Boolean(res) || (!Boolean(evald) && evald !== 0)) embed.setColor('RED')\n    else {\n      embed\n        .addField('Type', code('css', typeof evald))\n        .setColor('GREEN')\n    }\n  } catch (error) {\n    embed\n      .addField('Error', code('js', error))\n      .setColor('RED')\n  } finally {\n    msg.channel.send(embed).catch(error => {\n      msg.channel.send(`There was an error while displaying the eval result! ${error.message}`)\n    })\n  }\n}\n","behavior":"0","interpretation":"1","storage":"0","varName":"","VTypeSelect":"0","CVTypeValue":"","name":"Run Script"}],"_aliases":["evaluate","compile"]},{"name":"<hr>","permissions":"NONE","restriction":"1","_id":"rvASy","actions":[]},{"name":"globalban","permissions":"NONE","restriction":"2","_id":"JOvZm","actions":[{"info":"1","infoIndex":"1","storage":"1","varName":"parameters","name":"Store Command Params"},{"code":"(async() => {\n  const content = msg.content;\n  const args = content.split(' ');\n  let successful = 0, errored = 0;\n  const { RichEmbed } = require('discord.js');\n  args.shift();\n  let user = args.length ? (\n    msg.mentions.users.first() ||\n    await checkForUserID(args.join(' ')) ||\n    client.users.find(u => u.username.toLowerCase().includes(args.join(' ')))\n  ) : undefined;\n  if (!await user) {\n    return msg.channel.send(new RichEmbed()\n      .setColor('RED')\n      .setTitle('Error | No user specified')\n      .setDescription('Please specify a specific user to globally ban!')\n    )\n  }\n  const data = Files.data.players;\n  if (data[user.id] === undefined) data[user.id] = {};\n  data[user.id]['isGlobalBanned'] = true;\n  Files.saveData('players');\n  await client.guilds.map(async (guild) => {\n    const guildMember = guild.member(await user.id);\n    if (guildMember && !guildMember.bannable) {\n      console.log(`${guild.name} | ${await user.tag} | UNABLE TO BE BANNED.`);\n    } else {\n      guild.ban(user);\n      console.log(`${guild.name} | ${await user.tag} | Successfully banned.`);\n    }\n  });\n  const filter = (id, guild) => (guild.members.get(id) && guild.members.get(id).bannable) || !guild.members.get(id);\n  const filter2 = (id, guild) => (guild.members.get(id) && !guild.members.get(id).bannable);\n  let is = {\n    successful: await client.guilds.filter((guild) => filter(user.id, guild)).size,\n    errored: await client.guilds.filter((guild) => filter2(user.id, guild)).size\n  };\n  await msg.channel.send(new RichEmbed()\n    .setColor('GREEN')\n    .setTitle('Banned User')\n    .setDescription(`Successfully banned the user! He was removed successfully from ${is.successful} guilds, but couldn't be removed from ${is.errored} guilds.`)\n  )\n})()\n\nasync function checkForUserID (query) {\n  if (Number(query)) {\n    return (client.users.get(query) || await client.fetchUser(query).catch(() => {\n      return user = msg.author;\n    }));\n  }\n}","behavior":"1","interpretation":"1","storage":"0","varName":"","VTypeSelect":"0","CVTypeValue":"","name":"Run Script"}]},{"name":"isglobalbanned","permissions":"NONE","restriction":"1","_id":"bSDFL","actions":[{"info":"1","infoIndex":"1","storage":"1","varName":"parameters","name":"Store Command Params"},{"code":"(async() => {\n  const content = msg.content;\n  const args = content.split(' ');\n  const { RichEmbed } = require('discord.js');\n  args.shift();\n  let user = args.length ? (\n    msg.mentions.users.first() ||\n    await checkForUserID(args.join(' ')) ||\n    client.users.find(u => u.username.toLowerCase().includes(args.join(' ')))\n  ) : undefined;\n  if (!await user) {\n    return msg.channel.send(new RichEmbed()\n      .setColor('RED')\n      .setTitle('Error | No user specified')\n      .setDescription('Please specify a specific user to check!')\n    )\n  }\n  const embed = new RichEmbed()\n    .setAuthor(user.username, user.displayAvatarURL)\n  const data = Files.data.players;\n  const playerData = (data[user.id] === undefined) ? {} : data[user.id];\n  console.log(playerData.isGlobalBanned);\n  if (playerData.isGlobalBanned) {\n    embed\n      .setColor('RED')\n      .setTitle('User is Globally Banned')\n      .setDescription('This user was globally banned! They will now be banned from any guilds that are currently shared with the user! Guilds they are in: ' +\n        client.guilds\n          .filter(async (guild) => guild.members.get(user.id))\n          .map((guild) => guild.name))\n    await client.guilds\n      .filter(async (guild) => guild.members.get(user.id))\n      .map(async (guild) => {\n        const guildMember = guild.member(await user.id);\n        if (guildMember && !guildMember.bannable) {\n          console.log(`${guild.name} | ${await user.tag} | UNABLE TO BE BANNED.`);\n        }\n        guild.ban(user);\n        console.log(`${guild.name} | ${await user.tag} | Successfully banned.`);\n      });\n  } else {\n    embed\n      .setColor('GREEN')\n      .setTitle('User is Clean')\n      .setDescription('The user is not globally banned.')\n  }\n  msg.channel.send(embed);\n})()\n\nasync function checkForUserID (query) {\n  if (Number(query)) {\n    return (client.users.get(query) || await client.fetchUser(query).catch(() => {\n      return user = msg.author;\n    }));\n  }\n}","behavior":"1","interpretation":"1","storage":"0","varName":"","VTypeSelect":"0","CVTypeValue":"","name":"Run Script"}]}]
